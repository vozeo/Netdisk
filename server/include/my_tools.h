// my_tools.h
#ifndef HEHEPIG_MY_TOOLS
#define HEHEPIG_MY_TOOLS


//==============================================================
// 与 Linux 系统相关的函数
//==============================================================


/*-----------------------------------------------------
 * 使当前进程变为守护进程
 *
 * nochdir： 	若为0，则将该进程工作目录改为"/"，
 * 		否则不改变工作目录。
 *
 * noclose：	若为0，则重定向0/1/2句柄到"/dev/null"，
 * 		否则不变。
 *
 * nosetid：	若为0，则调用setsid()发起新会话使得其变
 * 		成脱离该控制台的进程，
 * 		否则不调用setsid()，退出当前控制台后该
 * 		进程也跟着结束。
 *
 * 成功返回0，否则返回-1
 * ---------------------------------------------------*/
int my_daemon(int nochdir, int noclose, int nosetsid);


/*-----------------------------------------------------
 * 探测某个进程是否活着
 * procName：	要找的进程名
 *
 * pids：	找到的进程号存在这里
 * 		若是找到多个，像数组一样，往后存
 *
 * maxcnt：	最多找这么多个，防止pids越界
 *
 * 成功则返回找到的个数，否则返回-1
 *
 * 实现方法现，贪方便，用的 popen 直接用shell的pidof
 * 其实pidof内部原理是去 /proc 文件夹遍历查找
 * ---------------------------------------------------*/
int my_find_pids_by_name(const char *procName, int *pids, int maxcnt);



//==============================================================
// 与字符串相关的函数
//==============================================================

/*-----------------------------------------
 * 字符串转int，有边界限制
 * 规则类似scanf，读完需要的，后面不管了
 * 成功返回0，否则返回-1，此时 num 不可信
 * ---------------------------------------*/
int string_to_int(const char *str, int *num, int minval, int maxval);


/*-----------------------------------------
 * 返回指向 str 开始第一个不是空格的位置
 * 若 str 是 NULL 则返回 NULL
 * ---------------------------------------*/
char *strip_space(const char *str);




//==============================================================
// 与配置文件相关的函数
//==============================================================

/*-----------------------------------------------------
 * 从 infile 中找到第一行符合 key=xxx 的，
 * 从=后面开始把那行剩下的内容填到buf里面，包括空格
 * 最长 maxlen（包括尾0）
 *
 * 不改变 infile 的状态直接 fscanf
 *
 * 成功返回存进的字符数（可以是0），失败返回-1
 * ---------------------------------------------------*/
//int conf_getval(FILE *infile, const char *key, char *buf, 
//		int maxlen);



#endif
